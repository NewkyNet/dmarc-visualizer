# https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html#docker-file
version: '3.5'

networks:
  es-net:
    driver: bridge

volumes:
  certs:
    driver: local
  kibanadata:
    driver: local

services:
  parsedmarc:
    depends_on:
      es01:
        condition: service_healthy
    build:
      context: ./parsedmarc/
      dockerfile: Dockerfile
    volumes:
      - ./files:/input:ro
      - ./output_files:/output
      - ./samples:/samples:ro
    networks:
      - es-net
    command: parsedmarc -c /parsedmarc.ini /input/*
    # restart: on-failure
  
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    networks:
      - es-net
    ports:
      - ${ES_PORT}:9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:9200 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 2s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    networks:
      - es-net
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  grafana:
    depends_on:
      es01:
        condition: service_healthy
    build: ./grafana/
    networks:
      - es-net
    ports:
      - 3000:3000
    user: root
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_AUTH_ANONYMOUS_ENABLED=true
    # healthcheck:
    #   test:
    #     [
    #       "CMD-SHELL",
    #       "curl -s -I http://localhost:3000/api/health | grep -q 'HTTP/1.1 200 OK'",
    #     ]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 120